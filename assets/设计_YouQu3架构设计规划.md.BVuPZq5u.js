import{_ as a,c as e,o,U as i}from"./chunks/framework.6t1LIot8.js";const q=JSON.parse('{"title":"YouQu3 架构设计规划","description":"","frontmatter":{},"headers":[],"relativePath":"设计/YouQu3架构设计规划.md","filePath":"设计/YouQu3架构设计规划.md","lastUpdated":1718083249000}'),t={name:"设计/YouQu3架构设计规划.md"},l=i('<h1 id="youqu3-架构设计规划" tabindex="-1">YouQu3 架构设计规划 <a class="header-anchor" href="#youqu3-架构设计规划" aria-label="Permalink to &quot;YouQu3 架构设计规划&quot;">​</a></h1><h2 id="_1-背景" tabindex="-1">1. 背景 <a class="header-anchor" href="#_1-背景" aria-label="Permalink to &quot;1. 背景&quot;">​</a></h2><p>YouQu 是 2021 年成都测试团队开始内部孵化的项目，旨在开发一个简单易用，功能强大的自动化测试框架。经过了 2 年多的持续开发优化，2023 年 8 月正式在 linuxdeepin 社区开源，2024 年 5 月在欧拉社区开源。从开源至今发布了 1.0 和 2.0 两个大版本，小版本更新了上百个。</p><p>YouQu 在公司内部已经被大量的自动化测试项目使用，在公司的多个自动化流程中运行得很好，能满足公司对自动化测试的业务需求，也得到了公司领导、同事们、内外部开发者们的认可。</p><p>但 YouQu 在现有框架下，仍然存在一些问题，比如：每次使用需要初始化框架工程及单独做环境部署，操作较为复杂、用例开发环境下更新版本不方便、源代码暴露在用户面前，导致框架代码容易被用户修改、绑定了太多公司的业务、一些底层模块或接口命名不优雅、对纯 CLI 操作系统环境支持不够友好等等。</p><p>有些问题处理起来必然会影响到框架的兼容性，势必对现有公司自动化用例、业务流程有一些影响，有些问题在现有框架结构下根本无法解决，因此我们才萌生了对框架结构进行重新设计想法，我们想要设计开发一个更加简单易用、更加纯粹、扩展性和兼容性更好的自动化测试框架 —— YouQu3。</p><h2 id="_2-目标" tabindex="-1">2. 目标 <a class="header-anchor" href="#_2-目标" aria-label="Permalink to &quot;2. 目标&quot;">​</a></h2><p>YouQu3 旨在成为下一代 Linux 自动化测试框架，在继承 YouQu 诸多亮点功能的同时解决其遇到的问题，同时对各功能进行插件化、模块化改造，全面优化框架接口调用机制。</p><ul><li>以 Python 包的形式提供框架能力，方便安装、更新。</li><li>支持离线部署，用例整体打包交付之后，可以在无网络环境下直接运行。</li><li>极致轻量化、可定制化依赖，可以根据测试项目类型安装对应的依赖。</li><li>功能可插拔，以插件的形式提供功能，不安装插件的情况下框架也能正常运行。</li><li>可视化配置，在浏览器中输入一些配置后即可驱动测试用例执行，搭配远程执行功能，可实现群控测试机执行。</li><li>支持非开发者下运行，简化系统环境部署。</li></ul><h2 id="_3-架构设计" tabindex="-1">3. 架构设计 <a class="header-anchor" href="#_3-架构设计" aria-label="Permalink to &quot;3. 架构设计&quot;">​</a></h2><h3 id="_3-1-总体方案" tabindex="-1">3.1 总体方案 <a class="header-anchor" href="#_3-1-总体方案" aria-label="Permalink to &quot;3.1 总体方案&quot;">​</a></h3><p>框架层提供总线服务，各功能以插件的方式接入，功能插件可插拔，由用例层决定使用哪些功能对应安装哪些插件，实现插件依赖的定制化、轻量化。</p><p>YouQu3 框架代码及插件库以 Python 三方包的形式提供，用例层直接 import 使用，框架源代码不直接呈现在用户面前，用户只需要关注用例、方法代码。</p><p>框架提供驱动执行的命令，可以在通过命令行快速驱动测试用例执行，通过命令行参数控制，支持多种用例驱动模式，如：路径驱动、标签驱动、关键词驱动等等，执行模式支持本地驱动执行和远程驱动执行。</p><p>框架也提供初始化用例工程的功能，一键生成用例工程模板代码，生成的用例工程遵循完整的 PO 设计模式，用例层、方法层基础代码自动生成，资源目录、Git 管理、环境依赖管理等相关功能的目录文件也都一键生成，让用户能专注于用例逻辑的编写和维护。</p><h3 id="_3-2-架构总览" tabindex="-1">3.2 架构总览 <a class="header-anchor" href="#_3-2-架构总览" aria-label="Permalink to &quot;3.2 架构总览&quot;">​</a></h3><h3 id="_3-3-核心流程" tabindex="-1">3.3 核心流程 <a class="header-anchor" href="#_3-3-核心流程" aria-label="Permalink to &quot;3.3 核心流程&quot;">​</a></h3><ul><li><p>框架驱动命令传递命令行参数给执行管理器，执行管理器接收命令行参数并读取公共配置项驱动用例执行；</p></li><li><p>用例执行过程中动态调用 YouQu3 底层功能，并动态加载 YouQu3 插件；</p></li><li><p>若插件已经安装，则正常调用，否则提示用户进行安装，抛异常程序终止；</p></li><li><p>用例执行完成后生成多种测试报告，并根据需要将测试结果，通过配置的接口进行数据回填。</p></li></ul><h3 id="_3-4-详细设计" tabindex="-1">3.4 详细设计 <a class="header-anchor" href="#_3-4-详细设计" aria-label="Permalink to &quot;3.4 详细设计&quot;">​</a></h3><p>驱动命令</p><p>配置项管理</p><p>框架总线接口</p><p>按测试类型划分插件</p><p>环境依赖管理</p><h2 id="_4-演进规划" tabindex="-1">4. 演进规划 <a class="header-anchor" href="#_4-演进规划" aria-label="Permalink to &quot;4. 演进规划&quot;">​</a></h2><p>插件生态</p><p>可视化配置</p><p>非开发者下运行</p><p>过程钩子</p>',29),r=[l];function u(p,h,n,_,d,s){return o(),e("div",null,r)}const m=a(t,[["render",u]]);export{q as __pageData,m as default};
