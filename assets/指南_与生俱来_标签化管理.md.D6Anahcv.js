import{_ as t,c as e,o as d,U as a}from"./chunks/framework.CoRJFuj9.js";const b=JSON.parse('{"title":"标签化管理","description":"","frontmatter":{},"headers":[],"relativePath":"指南/与生俱来/标签化管理.md","filePath":"指南/与生俱来/标签化管理.md","lastUpdated":1721405890000}'),c={name:"指南/与生俱来/标签化管理.md"},o=a('<h1 id="标签化管理" tabindex="-1">标签化管理 <a class="header-anchor" href="#标签化管理" aria-label="Permalink to &quot;标签化管理&quot;">​</a></h1><h2 id="使用说明" tabindex="-1">使用说明 <a class="header-anchor" href="#使用说明" aria-label="Permalink to &quot;使用说明&quot;">​</a></h2><p>在 CSV 文件中写入标签：</p><table><thead><tr><th style="text-align:center;">脚本文件ID</th><th style="text-align:center;">跳过原因</th><th style="text-align:center;">确认修复</th><th style="text-align:center;">废弃用例</th><th>...</th></tr></thead><tbody><tr><td style="text-align:center;">001</td><td style="text-align:center;">skip-xxx</td><td style="text-align:center;">fixed-xxx</td><td style="text-align:center;">removed-xxx</td><td>...</td></tr></tbody></table><h2 id="csv文件与脚本对应关系" tabindex="-1">CSV文件与脚本对应关系 <a class="header-anchor" href="#csv文件与脚本对应关系" aria-label="Permalink to &quot;CSV文件与脚本对应关系&quot;">​</a></h2><ol><li>在子项目目录下新建 CSV文件，用于保存用例标签，以 用例脚本的 py 文件去掉首字符串 &quot;<code>test_</code>&quot; ，去掉用例序号后的字符串，取<code>中间的名称</code>作为 csv 文件的文件名 。</li></ol><div class="tip custom-block"><p class="custom-block-title">举例</p><p>相册的用例文件为 <code>test_album_001.py</code>，<code>001</code> 表示用例的ID（也可以是自定义的数字代表用例序号），此时 CSV 文件名就应为 <code>album.csv</code> ；</p></div><ol start="2"><li><code>第 1 列</code>为 <code>脚本文件ID</code>，从<code>第 2 列</code>之后的所有列都是一个用例标签，标签可以无序，可以随意新增。</li></ol><div class="tip custom-block"><p class="custom-block-title">特殊标签</p><p><code>跳过原因</code>、<code>确认修复</code>、<code>废弃用例</code>是特殊的标签，后面会详细讲到</p></div><p>对于用例规模比较大的应用，比如文件管理器，建议分模块，每个模块建立一个 CSV 文件，所有 CSV 文件建议放在一个 <code>tags</code> 目录下。</p><p>是否分模块维护取决于应用的用例复杂度，但标签化管理的核心目的是集中化管理用例的标签，因此若 CSV 文件太多了也是一个很糟糕的事情。</p><h2 id="跳过用例" tabindex="-1">跳过用例 <a class="header-anchor" href="#跳过用例" aria-label="Permalink to &quot;跳过用例&quot;">​</a></h2><p>传统跳过用例的方式是在用例脚本里面给用例添加装饰器 (<code>@pytest.mark.skip</code>)，解除跳过时将装饰器代码删掉，这种方式需要修改用例代码，而通过 <code>csv</code> 文件来管理跳过用例则会方便很多;</p><p>将跳过用例操作也整合进入用例标签，在 <code>csv</code> 文件中新增一列为“跳过原因”；</p><h3 id="_1-固定跳过" tabindex="-1">1. 固定跳过 <a class="header-anchor" href="#_1-固定跳过" aria-label="Permalink to &quot;1. 固定跳过&quot;">​</a></h3><p>示例：</p><table><thead><tr><th style="text-align:center;">脚本文件ID</th><th style="text-align:center;">...（各种用例标签）</th><th style="text-align:center;">跳过原因</th></tr></thead><tbody><tr><td style="text-align:center;">679537</td><td style="text-align:center;">...</td><td style="text-align:center;">skip-受到某新需求影响</td></tr></tbody></table><ul><li>如果应用受到新需求影响需要跳过，则在此列备注具体的跳过原因。跳过的原因统一标签开头为 “<code>skip-XXX</code>”；</li><li>用例执行时判断 <code>csv</code> 文件里面跳过原因列是否存在跳过标签，存在跳过标签则用例也不会被执行，最终的用例状态会被标签为 <code>SKIPED</code>。</li></ul><h3 id="_2-条件判断跳过" tabindex="-1">2. 条件判断跳过 <a class="header-anchor" href="#_2-条件判断跳过" aria-label="Permalink to &quot;2. 条件判断跳过&quot;">​</a></h3><p>在 <code>CSV</code> 文件中，<code>跳过原因</code>一栏中填写为 “<code>{函数名}-{参数}</code>”。</p><p>某些用例会因为不同的环境判断用例是否执行，常见的场景为在不同架构上判断是否执行，例如：<code>skipif_platform-aarch64</code>；</p><p>示例：</p><table><thead><tr><th style="text-align:center;">脚本文件ID</th><th style="text-align:center;">...（各种用例标签）</th><th style="text-align:center;">跳过原因</th></tr></thead><tbody><tr><td style="text-align:center;">001</td><td style="text-align:center;">...</td><td style="text-align:center;">skipif_platform-aarch64&amp;sw64</td></tr></tbody></table><ul><li>跳过的原因标签为 “<code>skipif_platform-</code>” + 架构名，多个架构之间使用 “<code>&amp;</code>” 拼接；</li><li>判断当前架构是否为 <code>arrch64</code> 或者 <code>sw64</code>，若是，则跳过用例不执行；</li></ul><p>内置支持的条件跳过对象：</p><table><thead><tr><th>跳过对象</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>skipif_platform</code></td><td>(<code>x86_64</code>、<code>aarch64</code>、<code>loogarch64</code>、<code>sw64</code>)</td><td>架构跳过</td></tr><tr><td><code>skipif_not_platform</code></td><td>(<code>x86_64</code>、<code>aarch64</code>、<code>loogarch64</code>、<code>sw64</code>)</td><td>架构不跳过</td></tr><tr><td><code>skipif_xdg_type</code></td><td>(<code>wayland</code> 、<code>x11</code>)</td><td>系统显示协议跳过</td></tr><tr><td><code>skipif_cpu_name</code></td><td>/</td><td>使用 <code>sudo dmidecode -s system-product-name</code> 查看机器的 <code>cpu</code> 型号 剔除中横线和 <code>&amp;</code> 符号，<br>比如：KLVV-W5821，标签记录为 KLVVW5821</td></tr><tr><td><code>skipif_not_cpu_name</code></td><td>/</td><td>和上面逻辑相反</td></tr></tbody></table><h3 id="_3-自定义跳过" tabindex="-1">3.自定义跳过 <a class="header-anchor" href="#_3-自定义跳过" aria-label="Permalink to &quot;3.自定义跳过&quot;">​</a></h3><p>在用例工程根目录下存放 <code>skipif.py</code>，自定义条件判断跳过的函数写在此文件中。</p><p>方法编写规范：</p><ul><li>方法名必须以 <code>skipif</code> 开头；</li><li>方法必须有返回结果并且为布尔值（<code>True</code> 代表跳过，<code>False</code> 代表不跳过）；</li><li>方法只能有一个入参；</li></ul><p>在用例收集阶段会以第一个 “<code>-</code>” 进行分割，截取的左侧字符串作为函数名，在 <code>skipif.py</code> 文件中查找是否有同名函数，并将截取的右侧作为参数传递给该函数，通过获取该函数返回的布尔值，返回 <code>True</code>，则用例不执行，返回 <code>False</code>，则执行该用例。</p><div class="tip custom-block"><p class="custom-block-title">重要</p><ul><li><p>若函数需要多个参数，可自定义多个参数之间的连接符，连接符号不可使用下划线和逗号，推荐统一使用 <code>&amp;</code> 符号；</p></li><li><p>若需要多个 skipif 条件判断组合，使用 <code>&amp;&amp;</code> 符号将两个方法分开，比如：<code>skipif_platform-aarch64&amp;&amp;skipif_xdg_type-wayland</code> ；</p></li></ul></div><h2 id="确认修复" tabindex="-1">确认修复 <a class="header-anchor" href="#确认修复" aria-label="Permalink to &quot;确认修复&quot;">​</a></h2><p>针对于某些用例修复后，但不能立即删除跳过原因（<code>skip-XXX</code>）的用例，新增一列标签名为 “<code>确认修复</code>”，作为标记该用例是否已经修复，固定填入字段为 “<code>fixed-已修复</code>”。这样这条用例即使同时标记了 <code>skip-XXX</code> 也会正常执行。</p><p>示例：</p><table><thead><tr><th style="text-align:center;">用例ID</th><th style="text-align:center;">...（各种用例标签）</th><th style="text-align:center;">跳过原因</th><th style="text-align:center;">确认修复</th></tr></thead><tbody><tr><td style="text-align:center;">679537</td><td style="text-align:center;">...</td><td style="text-align:center;">skip-受到某新需求影响</td><td style="text-align:center;">fixed-已修复</td></tr></tbody></table><p>【同时标记了<code>skip</code> 和 <code>fixed</code>，但仍然想要跳过用例】</p><p>当 “跳过原因” 和 “确认修复” 中同时填入后，命令行传递参数 <code>--ifixed yes</code>，则代码不会执行该条用例。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> manage.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ifixed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yes</span></span></code></pre></div><h2 id="废弃用例" tabindex="-1">废弃用例 <a class="header-anchor" href="#废弃用例" aria-label="Permalink to &quot;废弃用例&quot;">​</a></h2><p>针对某些用例，由于需求变更，环境影响或评估不再适用于自动化测试时，用例需要废弃，则新增一列标签名为 “废弃用例”，该列存在 “removed-{废弃原因}”，则用例不会执行。</p><table><thead><tr><th style="text-align:center;">用例ID</th><th style="text-align:center;">...（各种用例标签）</th><th style="text-align:center;">跳过原因</th><th style="text-align:center;">确认修复</th><th style="text-align:center;">废弃用例</th></tr></thead><tbody><tr><td style="text-align:center;">679537</td><td style="text-align:center;">...</td><td style="text-align:center;">skip-受到某新需求影响</td><td style="text-align:center;">fixed-已修复</td><td style="text-align:center;">removed-已废弃</td></tr></tbody></table><p><img src="https://pic.imgdb.cn/item/64f054ca661c6c8e54ff4f70.png" alt=""></p><h2 id="文件格式" tabindex="-1">文件格式 <a class="header-anchor" href="#文件格式" aria-label="Permalink to &quot;文件格式&quot;">​</a></h2><p>此配置文件需要维护大量的标签数据，且要方便能使用 <code>Excel</code> 打开进行编辑查看，更重要的是我们不想引入三方依赖，<code>CSV</code> 文件几乎是唯一能满足所有的要求的文件格式。</p>',45),l=[o];function i(s,r,n,h,p,x){return d(),e("div",null,l)}const k=t(c,[["render",i]]);export{b as __pageData,k as default};
