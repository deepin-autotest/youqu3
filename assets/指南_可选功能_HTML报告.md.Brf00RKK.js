import{_ as n,D as o,c as l,m as a,a as s,I as t,U as i,o as h}from"./chunks/framework.BIvyeOSU.js";const x=JSON.parse('{"title":"HTML报告","description":"","frontmatter":{},"headers":[],"relativePath":"指南/可选功能/HTML报告.md","filePath":"指南/可选功能/HTML报告.md","lastUpdated":1722594621000}'),p={name:"指南/可选功能/HTML报告.md"},d=a("h1",{id:"html报告",tabindex:"-1"},[s("HTML报告 "),a("a",{class:"header-anchor",href:"#html报告","aria-label":'Permalink to "HTML报告"'},"​")],-1),r=a("p",null,[s("YouQu3 默认生成测试报告 "),a("code",null,"元数据"),s("，支持通过"),a("code",null,"报告生成器"),s("生成 HTML 报告。")],-1),c={id:"服务器生成模式",tabindex:"-1"},_=a("a",{class:"header-anchor",href:"#服务器生成模式","aria-label":'Permalink to "服务器生成模式  <Badge type="warning" text="默认" />"'},"​",-1),u=i('<p>YouQu3 在所有用例执行完之后，默认使用远程测试报告生成服务器生成 HTML 报告，并暴露 HTTP 服务，且 HTTP 服务的 URL 会返回给测试机生成到 report 目录下，用户可以随时访问。</p><p>这样做的好处：</p><p>1、省去了测试机上 HTML 测试报告的依赖。</p><p>2、测试报告可以做持久化留存，随时可以访问，不用担心测试机上被删掉或重装，任何的流水线都不需要再单独处理测试报告数据持久化的问题。</p><p>3、YouQu3 可以做简易版的调用次数统计，之前我一直在想，如何能方便的统计 YouQu 框架到底被使用了多少次，或许测试报告服务器模式是一种比较简单粗暴但很直接的统计方法。</p><h4 id="插件安装" tabindex="-1">插件安装 <a class="header-anchor" href="#插件安装" aria-label="Permalink to &quot;插件安装&quot;">​</a></h4><p>基础环境并不包含报告生成器，需要指定安装报告插件或测试类型，如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> youqu-html-rpc</span></span></code></pre></div><p>或</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;youqu3[gui]&quot;</span></span></code></pre></div>',10),k={id:"本地生成模式",tabindex:"-1"},g=a("a",{class:"header-anchor",href:"#本地生成模式","aria-label":'Permalink to "本地生成模式 <Badge type="warning" text="youqu-html 插件" />"'},"​",-1),m=i('<p>如果已安装插件 <code>youqu-html</code> ，YouQu3 默认在本地生成 HTML 测试报告，您可以在 report 查看。</p><h4 id="插件安装-1" tabindex="-1">插件安装 <a class="header-anchor" href="#插件安装-1" aria-label="Permalink to &quot;插件安装&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> youqu-html</span></span></code></pre></div>',3);function b(T,y,F,C,v,B){const e=o("Badge");return h(),l("div",null,[d,r,a("h3",c,[s("服务器生成模式 "),t(e,{type:"warning",text:"默认"}),s(),_]),u,a("h3",k,[s("本地生成模式 "),t(e,{type:"warning",text:"youqu-html 插件"}),s(),g]),m])}const H=n(p,[["render",b]]);export{x as __pageData,H as default};
