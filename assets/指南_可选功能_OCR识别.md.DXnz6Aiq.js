import{_ as s,c as i,o as a,U as n,a6 as t}from"./chunks/framework.zofEky1p.js";const y=JSON.parse('{"title":"OCR识别","description":"","frontmatter":{},"headers":[],"relativePath":"指南/可选功能/OCR识别.md","filePath":"指南/可选功能/OCR识别.md","lastUpdated":1719484137000}'),h={name:"指南/可选功能/OCR识别.md"},l=n(`<h1 id="ocr识别" tabindex="-1">OCR识别 <a class="header-anchor" href="#ocr识别" aria-label="Permalink to &quot;OCR识别&quot;">​</a></h1><h2 id="元素定位" tabindex="-1">元素定位 <a class="header-anchor" href="#元素定位" aria-label="Permalink to &quot;元素定位&quot;">​</a></h2><p>框架代码示意（Client）：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> OCR</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OCR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ocr(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">target_strings, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    picture_abspath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    similarity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    return_default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    return_first</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ch&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>对于一些文案的场景非常适用，此方法直接返回坐标，可以用于<strong>元素定位</strong>。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> youqu3.ocr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> OCR</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OCR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ocr(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;确定&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OCR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ocr(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;确定&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).center()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OCR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ocr(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;确定&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).right_click()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OCR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ocr(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;确定&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).double_click()</span></span></code></pre></div><h2 id="断言" tabindex="-1">断言 <a class="header-anchor" href="#断言" aria-label="Permalink to &quot;断言&quot;">​</a></h2><p>也可以用于<strong>文字断言</strong>，代码示意：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.assert_ocr_exist(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;取消收藏&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h2><p>RPC 的调用逻辑：</p><p><img src="https://pic.imgdb.cn/item/64f054c3661c6c8e54ff47b5.png" alt=""></p><p>这样我们只需要在服务端部署好 OCR 识别的服务，然后通过 RPC 服务将功能提供出来，框架里面只需要调用对应的 RPC 接口就行了。</p><h2 id="负载均衡" tabindex="-1">负载均衡 <a class="header-anchor" href="#负载均衡" aria-label="Permalink to &quot;负载均衡&quot;">​</a></h2><p>随着 OCR 服务在自动化测试子项目中被广泛使用，单台服务远不能满足业务需求，因此我们需要将 OCR 服务做分布式集群化部署，然后通过负载均衡技术将业务请求分发到 OCR 服务器上。</p><h3 id="为什么基于-nginx-的负载均衡方案不能满足业务需求" tabindex="-1">为什么基于 Nginx 的负载均衡方案不能满足业务需求 <a class="header-anchor" href="#为什么基于-nginx-的负载均衡方案不能满足业务需求" aria-label="Permalink to &quot;为什么基于 Nginx 的负载均衡方案不能满足业务需求&quot;">​</a></h3><ol><li>每次 <code>OCR</code> 识别业务实际是两次 <code>RPC</code> 接口请求，第 1 次是将当前屏幕截图并发送到 <code>PRC</code> 服务器，第 2 次调用识别的接口做识别，采用 Nginx 轮询算法做负载均衡会出现两次 <code>RPC</code> 请求被分发到两台不同的服务器上，这明显是错误的。</li><li>基于 Nginx <code>ip_hash</code> 的 <code>session</code> 管理负载均衡算法时，Nginx 默认取 IP 的前 3 段做哈希，而我们的测试机都在同一个网段，IP 前 3 段是一样的，因此会导致负载不均衡。</li></ol><h3 id="youqu-的解决方案" tabindex="-1">YouQu 的解决方案 <a class="header-anchor" href="#youqu-的解决方案" aria-label="Permalink to &quot;YouQu 的解决方案&quot;">​</a></h3><p>为了解决上面 2 个问题，YouQu3 在 <code>ocr</code> 模块对 <a href="https://linuxdeepin.github.io/pdocr-rpc/" target="_blank" rel="noreferrer">pdocr-rpc</a> 功能进行了增强，实现了一个中间件用以在用例跑测过程中对 OCR 服务集群进行负载均衡。</p><p><img src="`+t+'" alt=""></p>',20),e=[l];function p(k,r,o,d,c,g){return a(),i("div",null,e)}const F=s(h,[["render",p]]);export{y as __pageData,F as default};
