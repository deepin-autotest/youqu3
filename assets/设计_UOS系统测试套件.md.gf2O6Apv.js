import{_ as s,c as i,o as a,U as e}from"./chunks/framework.BLjsk4Vn.js";const g=JSON.parse('{"title":"UOS 系统测试套件（UMTK）","description":"","frontmatter":{"Author":"mikigo"},"headers":[],"relativePath":"设计/UOS系统测试套件.md","filePath":"设计/UOS系统测试套件.md","lastUpdated":1718274874000}'),n={name:"设计/UOS系统测试套件.md"},l=e(`<h1 id="uos-系统测试套件-umtk" tabindex="-1">UOS 系统测试套件（UMTK） <a class="header-anchor" href="#uos-系统测试套件-umtk" aria-label="Permalink to &quot;UOS 系统测试套件（UMTK）&quot;">​</a></h1><h2 id="_1-简介" tabindex="-1">1. 简介 <a class="header-anchor" href="#_1-简介" aria-label="Permalink to &quot;1. 简介&quot;">​</a></h2><p>UOS 系统测试套件（全称：UOS 系统自动化测试操作方法套件，以下简称测试套件）是基于 YouQu3 封装的 UOS 操作系统预装应用的元素操作方法套件。</p><p>测试套件是一个独立项目，旨在提供系统预装应用所有的元素的操作方法，这些元素操作方法可以用于自动化用例调用，组装成自动化测试用例。</p><h2 id="_2-工程设计" tabindex="-1">2. 工程设计 <a class="header-anchor" href="#_2-工程设计" aria-label="Permalink to &quot;2. 工程设计&quot;">​</a></h2><h3 id="_2-1-工程结构" tabindex="-1">2.1. 工程结构 <a class="header-anchor" href="#_2-1-工程结构" aria-label="Permalink to &quot;2.1. 工程结构&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uos-method-toolkit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LICENSE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> README.md</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> umtk</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dde_file_manager</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dde_file_manager_method.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __init__.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deepin_music</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deepin_music_method.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __init__.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deepin_movie</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deepin_music_method.py</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __init__.py</span></span></code></pre></div><h3 id="_2-2-方案说明" tabindex="-1">2.2. 方案说明 <a class="header-anchor" href="#_2-2-方案说明" aria-label="Permalink to &quot;2.2. 方案说明&quot;">​</a></h3><ul><li><p>系统中各应用划分自己的模块，模块名称为应用包名，下划线连接单词。</p></li><li><p>每个应用存在一个唯一的出口文件，供外部用例调用。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> umtk.dde_file_manager </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DdeFileManagerMethod</span></span></code></pre></div><p><code>DdeFileManagerMethod</code> 可以调用 <code>dde-file-manager</code> 所有的元素操作方法。</p></li><li><p>所有方法以类的形式编写，遵循 PO 设计模式。</p></li><li><p>测试套件中所有的方法均为原子操作，不做复杂步骤的封装。</p></li></ul><h2 id="_3-套件的发布" tabindex="-1">3. 套件的发布 <a class="header-anchor" href="#_3-套件的发布" aria-label="Permalink to &quot;3. 套件的发布&quot;">​</a></h2><ul><li><p>套件分大版本发布，比如 V20、V25 是不同的测试套件版本，在不同的代码仓库中。</p></li><li><p>在同一个大版本中，套件持续保持更新，并在系统关键节点发布对应的版本；</p><p>比如 V20 阶段，1070 发布一个套件版本，1071 发布一个套件版本，一次类推，过程中如果根据需要出小版本。</p></li><li><p>套件通过 PyPI 发布，用户可直接通过 pip 命令安装使用：</p><p>安装：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> umtk</span></span></code></pre></div><p>使用：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> umtk.dde_file_manager </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DdeFileManagerMethod</span></span></code></pre></div></li></ul><h2 id="_4-套件的维护" tabindex="-1">4. 套件的维护 <a class="header-anchor" href="#_4-套件的维护" aria-label="Permalink to &quot;4. 套件的维护&quot;">​</a></h2><ul><li><p>套件由专人主责维护（maintainer），其他人可以提需求或 issue，以保持套件的各方面一致性。</p></li><li><p>鼓励内外部开发者贡献 PR。</p></li></ul><h2 id="_5-对套件的测试" tabindex="-1">5. 对套件的测试 <a class="header-anchor" href="#_5-对套件的测试" aria-label="Permalink to &quot;5. 对套件的测试&quot;">​</a></h2><p>套件里面保存元素的操作方法，在操作方法多了之后，维护方法的稳定性有效性将成为一个问题。</p><p>因此，我们需要建立对套件的自动化测试，专门针对元素操作方法函数进行测试。</p>`,16),t=[l];function p(h,k,d,r,o,F){return a(),i("div",null,t)}const _=s(n,[["render",p]]);export{g as __pageData,_ as default};
