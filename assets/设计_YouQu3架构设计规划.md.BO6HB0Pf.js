import{_ as s,c as i,o as a,U as l,a6 as n,a7 as h}from"./chunks/framework.GAA4NOjy.js";const u=JSON.parse('{"title":"YouQu3 架构设计规划","description":"","frontmatter":{"Author":"mikigo"},"headers":[],"relativePath":"设计/YouQu3架构设计规划.md","filePath":"设计/YouQu3架构设计规划.md","lastUpdated":1718864534000}'),e={name:"设计/YouQu3架构设计规划.md"},t=l('<h1 id="youqu3-架构设计规划" tabindex="-1">YouQu3 架构设计规划 <a class="header-anchor" href="#youqu3-架构设计规划" aria-label="Permalink to &quot;YouQu3 架构设计规划&quot;">​</a></h1><h2 id="_1-背景" tabindex="-1">1. 背景 <a class="header-anchor" href="#_1-背景" aria-label="Permalink to &quot;1. 背景&quot;">​</a></h2><p>YouQu（<code>YouQu2</code>） 是 2021 年成都测试团队开始内部孵化的项目，旨在开发一个简单易用，功能强大的自动化测试框架。经过了 2 年多的持续开发优化，2023 年 8 月正式在 linuxdeepin 社区开源，2024 年 5 月在欧拉社区开源。从开源至今发布了 1.0 和 2.0 两个大版本，小版本更新了数十个。</p><p>YouQu2 在公司内部已经被大量的自动化测试项目使用，在公司的多个自动化流程中运行得很好，能满足公司对自动化测试的业务需求，也得到了公司领导、同事们、内外部开发者们的认可。</p><p>但 YouQu2 在现有框架下，仍然存在一些不尽人意的地方，比如：</p><ul><li>每次使用需要初始化框架工程及单独做环境部署，操作较为复杂;</li><li>用例开发环境下更新版本不方便、源代码暴露在用户面前;</li><li>导致框架代码容易被用户修改;</li><li>绑定了太多公司的业务;</li><li>一些底层模块或接口命名不优雅;</li><li>对纯 CLI 操作系统环境支持不够友好；</li></ul><p>等等。</p><p>有些问题处理起来必然会影响到框架的兼容性，势必对现有公司自动化用例、业务流程有一些影响，甚至有些问题在现有框架结构下根本无法解决，因此我们才萌生了对框架结构进行重新设计想法，我们想要设计开发一个更加简单易用、更加纯粹、扩展性和兼容性更好的自动化测试框架 —— <strong><code>YouQu3</code></strong>。</p><h2 id="_2-目标" tabindex="-1">2. 目标 <a class="header-anchor" href="#_2-目标" aria-label="Permalink to &quot;2. 目标&quot;">​</a></h2><p>YouQu3 旨在成为下一代 Linux 自动化测试框架，在继承 YouQu2 诸多亮点功能的同时解决其遇到的问题，同时对各功能进行插件化、模块化改造，全面优化框架接口调用机制。</p><ul><li>以 Python 包的形式提供框架能力，方便安装、更新。</li><li>支持离线部署，用例整体打包交付之后，可以在无网络环境下直接运行。</li><li>极致轻量化、可定制化依赖，可以根据测试项目类型安装对应的依赖。</li><li>功能可插拔，以插件的形式提供功能，不安装插件的情况下框架也能正常运行。</li><li>可视化配置，在浏览器中输入一些配置后即可驱动测试用例执行，搭配远程执行功能，可实现群控测试机执行。</li><li>支持非开发者下运行，简化系统环境部署。</li></ul><p>价值：</p><ul><li>使用更简单方便，降低使用门槛。</li><li>环境依赖可以一键打包交付，适合有离线部署需求的用户。</li><li>安全性稳定性更好，提高用例开发效率，提高 CI/CD 运行稳定性。</li><li>全面插件化模块化，功能扩展性更好。</li><li>框架和插件库独立维护更新，互不影响。</li></ul><h2 id="_3-架构设计" tabindex="-1">3. 架构设计 <a class="header-anchor" href="#_3-架构设计" aria-label="Permalink to &quot;3. 架构设计&quot;">​</a></h2><h3 id="_3-1-总体方案" tabindex="-1">3.1. 总体方案 <a class="header-anchor" href="#_3-1-总体方案" aria-label="Permalink to &quot;3.1. 总体方案&quot;">​</a></h3><p>框架层提供总线服务，各功能以插件的方式接入，功能插件可插拔，由用例层决定使用哪些功能对应安装哪些插件，实现插件依赖的定制化。</p><p>YouQu3 框架代码及插件库以 Python 三方包的形式提供，用例层直接 import 使用，框架源代码不直接呈现在用户面前，用户只需要关注用例、方法代码。</p><p>框架提供驱动执行的命令，可以在通过命令行快速驱动测试用例执行，通过命令行参数控制，支持多种用例驱动模式，如：路径驱动、标签驱动、关键词驱动等等，执行模式支持本地驱动执行和远程驱动执行。</p><p>框架也提供初始化用例工程的功能，一键生成用例工程模板代码，生成的用例工程遵循完整的 PO 设计模式，用例层、方法层基础代码自动生成，资源目录、Git 管理、环境依赖管理等相关功能的目录文件也都一键生成，让用户能专注于用例逻辑的编写和维护。</p><h3 id="_3-2-架构设计" tabindex="-1">3.2. 架构设计 <a class="header-anchor" href="#_3-2-架构设计" aria-label="Permalink to &quot;3.2. 架构设计&quot;">​</a></h3><p><img src="'+n+'" alt=""></p><h3 id="_3-3-整体数据流" tabindex="-1">3.3. 整体数据流 <a class="header-anchor" href="#_3-3-整体数据流" aria-label="Permalink to &quot;3.3. 整体数据流&quot;">​</a></h3><p><img src="'+h+`" alt=""></p><ul><li><p>框架驱动命令传递命令行参数给执行管理器，执行管理器接收命令行参数并读取公共配置项驱动用例执行；</p></li><li><p>用例执行过程中动态调用 YouQu3 底层功能，并动态加载 YouQu3 插件；</p></li><li><p>若插件已经安装，则正常调用，否则提示用户进行安装，抛异常程序终止；</p></li><li><p>用例执行完成后生成多种测试报告，并根据需要将测试结果，通过配置的接口进行数据回填。</p></li></ul><h3 id="_3-4-详细设计" tabindex="-1">3.4. 详细设计 <a class="header-anchor" href="#_3-4-详细设计" aria-label="Permalink to &quot;3.4. 详细设计&quot;">​</a></h3><p>详细描述各模块工作方式。</p><h4 id="_3-4-1-驱动执行管理" tabindex="-1">3.4.1. 驱动执行管理 <a class="header-anchor" href="#_3-4-1-驱动执行管理" aria-label="Permalink to &quot;3.4.1. 驱动执行管理&quot;">​</a></h4><p>框架提供驱动命令：<code>youqu3</code>，用于统一管理命令行参数驱动用例执行，驱动命令将命令行参数传递给框架底层 <code>driver</code> 模块（驱动），<code>driver</code> 获取命令行参数并结合配置项，解析测试策略，从而驱动测试用例执行。</p><p>支持本地和远程执行模式：</p><ul><li>支持基于用例标签化管理驱动用例执行</li><li>支持基于测试单驱动插件驱动用例执行</li><li>支持基于关键词驱动用例执行</li><li>支持用例目录或文件路径驱动执行</li></ul><h4 id="_3-4-2-配置项管理" tabindex="-1">3.4.2. 配置项管理 <a class="header-anchor" href="#_3-4-2-配置项管理" aria-label="Permalink to &quot;3.4.2. 配置项管理&quot;">​</a></h4><p>YouQu3 配置项管理，采用命令行参数 + 公共配置的形式；</p><ul><li>命令行参数可以通过驱动命令提供入参选项，显示的传入参数值。</li><li>公共配置为框架提供的一些具有默认值的配置项，原则上不通过修改配置文件的方式修改，可以通过系统环境变量或修改 <code>setting</code> 对象的属性值。</li><li>用例工程配置模块建议继承 <code>_Setting</code> 配置类。</li><li>不再提供 <code>ini</code> 配置文件管理配置项。</li></ul><h4 id="_3-4-3-框架总线接口" tabindex="-1">3.4.3. 框架总线接口 <a class="header-anchor" href="#_3-4-3-框架总线接口" aria-label="Permalink to &quot;3.4.3. 框架总线接口&quot;">​</a></h4><p>框架底层对各功能插件提供 <code>插槽</code> 中间件，插件如果已经安装，上层用例就能通过框架动态调用插件提供的功能，同时框架可以在中间件中对插件功能进行增强或修改。</p><p>若插件没有被安装，框架可以正常运行，但若用例层调用了此插件提供的功能，此时会抛异常，并提示用户安装对应插件。</p><h4 id="_3-4-4-按测试类型管理插件" tabindex="-1">3.4.4. 按测试类型管理插件 <a class="header-anchor" href="#_3-4-4-按测试类型管理插件" aria-label="Permalink to &quot;3.4.4. 按测试类型管理插件&quot;">​</a></h4><p>框架的安装命令可以根据用例工程所属的测试类型，自动安装框架及改测试类型需要的插件依赖，不需要用户去了解和思考哪些插件适合哪种测试类型。</p><h4 id="_3-4-5-环境依赖管理" tabindex="-1">3.4.5. 环境依赖管理 <a class="header-anchor" href="#_3-4-5-环境依赖管理" aria-label="Permalink to &quot;3.4.5. 环境依赖管理&quot;">​</a></h4><p>采用虚拟环境管理依赖项，虚拟环境默认在用例功能根目录下创建，支持对依赖环境进行一键打包，也可以方便对虚拟环境的管理和维护。</p><h2 id="_4-用例工程设计" tabindex="-1">4. 用例工程设计 <a class="header-anchor" href="#_4-用例工程设计" aria-label="Permalink to &quot;4. 用例工程设计&quot;">​</a></h2><p>用例工程支持一键创建：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> youqu3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><h3 id="_4-1-用例工程结构" tabindex="-1">4.1. 用例工程结构 <a class="header-anchor" href="#_4-1-用例工程结构" aria-label="Permalink to &quot;4.1. 用例工程结构&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">autotest-my-case</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 用例工程名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> case</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 用例层目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __init__.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assert_res</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 断言资源</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base_case.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 用例基类</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test_mycase_001.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 用例示例 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test_mycase_002.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 用例示例 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> method</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 方法层目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __init__.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> static_res</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 用例执行所需要的资源</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image_res</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 图像识别方法所需要的资源</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base_method.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 方法基类</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_case_method.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 方法唯一出口类</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assert_method.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 断言方法类</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ui.ini</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 相对位移元素定位方案的配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 配置模块，提供可调用的配置对象config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> conftest.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Fixture</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debug.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 调试用例驱动脚本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mycase.csv</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 用例标签管理文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 默认环境变量管理文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 依赖管理文件</span></span></code></pre></div><h3 id="_4-2-各模块编写思路" tabindex="-1">4.2. 各模块编写思路 <a class="header-anchor" href="#_4-2-各模块编写思路" aria-label="Permalink to &quot;4.2. 各模块编写思路&quot;">​</a></h3><p>详细介绍各功能模块的设计和编写思路。</p><h4 id="_4-2-1-方法层" tabindex="-1">4.2.1. 方法层 <a class="header-anchor" href="#_4-2-1-方法层" aria-label="Permalink to &quot;4.2.1. 方法层&quot;">​</a></h4><p>用于统一存放用例步骤的操作方法，所有的方法按照 PO 设计思想，放置在对应的类里面。</p><ul><li><p>如果一个应用存在多个页面，按照 <code>一个页面一个类，一个元素一个方法</code> 的思路，进行编写，所有的操作步骤都应该有一个对应的方法。</p></li><li><p>如果一个页面元素操作比较多，也可以对这个页面做进一步划分；</p><p>比如：文件管理器，我们可以将界面分为四个区域：标题栏(<code>TitleMethod)</code>、右边视图区域(<code>RightMethod</code>)、左边视图区域(<code>LeftMethod</code>)、弹窗(<code>PopMethod</code>)。</p><p><img src="https://pic.imgdb.cn/item/64f054c3661c6c8e54ff4806.png" alt=""></p></li></ul><p>方法层按需导入框架提供的底层能力，比如：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># my_case_method.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> youqu3.dogtail </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Dogtail</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method.base_method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaseMethod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCaseMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> click_dde_file_manage_on_dock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    	&quot;&quot;&quot;任务栏点击文件管理器&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Dogtail().ele(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Btn_文件管理器&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).click()</span></span></code></pre></div><h4 id="_4-2-2-用例层" tabindex="-1">4.2.2. 用例层 <a class="header-anchor" href="#_4-2-2-用例层" aria-label="Permalink to &quot;4.2.2. 用例层&quot;">​</a></h4><p>用例层负责管理用例逻辑，其中所有的用例步骤都应该调用方法层对应的方法。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># test_mycase_001.py </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method.my_case_method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyCaseMethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> case.base_case </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaseCase</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestMyCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_mycase_001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;从任务栏启动文件管理器&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        MyCaseMethod().click_dde_file_manage_on_dock()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.assert_process_status(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dde-file-manager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="_4-2-3-断言" tabindex="-1">4.2.3. 断言 <a class="header-anchor" href="#_4-2-3-断言" aria-label="Permalink to &quot;4.2.3. 断言&quot;">​</a></h4><p>用例工程的断言方法类 <code>assert_method::AssertMethod</code> 继承了 YouQu3 的 <code>assert.py::Assert</code>：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># assert_method.py</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> youqu3.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">assert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Assert</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AssertMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span></code></pre></div><p>然后 <code>AssertMethod</code> 作为父类被 <code>BaseCase</code> 继承：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># base_case.py</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method.assert_method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AssertMethod</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BaseCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AssertMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span></code></pre></div><p>最后所有的用例类均继承 <code>BaseCase</code>，这样在用例中能够使用统一的断言语句：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># test_mycase_001.py</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> case.base_case </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaseCase</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_mycase_001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        ...</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.assert_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span></span></code></pre></div><h4 id="_4-2-4-配置对象" tabindex="-1">4.2.4. 配置对象 <a class="header-anchor" href="#_4-2-4-配置对象" aria-label="Permalink to &quot;4.2.4. 配置对象&quot;">​</a></h4><p>用例工程配置对象继承 YouQu3 配置类，以此来获取框架已有的公共配置，同时定义一些用例工程相关的配置，如：<code>assert_res</code>、<code>static_res</code>、<code>image_res</code> 的路径，以便方法或用例中能够获取到。</p><h4 id="_4-2-5-用例标签管理文件" tabindex="-1">4.2.5. 用例标签管理文件 <a class="header-anchor" href="#_4-2-5-用例标签管理文件" aria-label="Permalink to &quot;4.2.5. 用例标签管理文件&quot;">​</a></h4><p>在 CSV 文件中定义用例对象的标签：</p><ul><li>维护标签时，不需要修改用例脚本。</li><li>日常维护过程中，跳过用例可以直接通过修改 CSV 文件来控制用例是否跳过。</li></ul><h4 id="_4-2-6-默认环境变量管理文件" tabindex="-1">4.2.6. 默认环境变量管理文件 <a class="header-anchor" href="#_4-2-6-默认环境变量管理文件" aria-label="Permalink to &quot;4.2.6. 默认环境变量管理文件&quot;">​</a></h4><p>定义虚拟环境相关的一些环境变量，以此控制虚拟环境创建、运行的行为。</p><h4 id="_4-2-7-依赖管理文件" tabindex="-1">4.2.7. 依赖管理文件 <a class="header-anchor" href="#_4-2-7-依赖管理文件" aria-label="Permalink to &quot;4.2.7. 依赖管理文件&quot;">​</a></h4><p>定义用例工程所需要的依赖包。</p><h4 id="_4-2-8-调试用例驱动" tabindex="-1">4.2.8. 调试用例驱动 <a class="header-anchor" href="#_4-2-8-调试用例驱动" aria-label="Permalink to &quot;4.2.8. 调试用例驱动&quot;">​</a></h4><p>用于用例开发调试过程中，方便用例开发者以 debug 模式运行脚本。</p><h2 id="_5-演进规划" tabindex="-1">5. 演进规划 <a class="header-anchor" href="#_5-演进规划" aria-label="Permalink to &quot;5. 演进规划&quot;">​</a></h2><h4 id="可视化配置" tabindex="-1">可视化配置 <a class="header-anchor" href="#可视化配置" aria-label="Permalink to &quot;可视化配置&quot;">​</a></h4><p>提供一个 Web 页面化的配置功能，配合远程执行功能，支持对各种测试策略的驱动执行。</p><h4 id="非开发者下运行" tabindex="-1">非开发者下运行 <a class="header-anchor" href="#非开发者下运行" aria-label="Permalink to &quot;非开发者下运行&quot;">​</a></h4><p>支持在非开发着环境下运行用例：</p><ul><li>减少系统自动化环境准备的难度；</li><li>更贴合大部分真实用户的使用场景；</li></ul><h4 id="过程钩子" tabindex="-1">过程钩子 <a class="header-anchor" href="#过程钩子" aria-label="Permalink to &quot;过程钩子&quot;">​</a></h4><p>支持对用例执行的各个阶段插入钩子，框架预设一些文件接口规范，用户只需要创建符合框架定义的文件命名规范脚本文件，即可自动被框架加载并执行。</p>`,81),p=[t];function k(d,r,o,c,g,y){return a(),i("div",null,p)}const E=s(e,[["render",k]]);export{u as __pageData,E as default};
