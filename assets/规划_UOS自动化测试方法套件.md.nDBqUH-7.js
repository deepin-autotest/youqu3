import{_ as s,c as i,o as a,U as l}from"./chunks/framework.HMcWPbbb.js";const F=JSON.parse('{"title":"UOS 自动化测试方法套件（UMTK）","description":"","frontmatter":{"Author":"mikigo"},"headers":[],"relativePath":"规划/UOS自动化测试方法套件.md","filePath":"规划/UOS自动化测试方法套件.md","lastUpdated":1721298399000}'),e={name:"规划/UOS自动化测试方法套件.md"},n=l(`<h1 id="uos-自动化测试方法套件-umtk" tabindex="-1">UOS 自动化测试方法套件（UMTK） <a class="header-anchor" href="#uos-自动化测试方法套件-umtk" aria-label="Permalink to &quot;UOS 自动化测试方法套件（UMTK）&quot;">​</a></h1><h2 id="_1-简介" tabindex="-1">1. 简介 <a class="header-anchor" href="#_1-简介" aria-label="Permalink to &quot;1. 简介&quot;">​</a></h2><p>UOS 自动化测试方法套件，全称：UOS 系统自动化测试操作方法套件（<code>UOS AutoTest Method ToolKit</code> —— <strong><code>UMTK</code></strong>），以下简称测试方法套件，是基于 YouQu3 封装的 UOS 操作系统预装应用的元素操作方法套件。</p><p>测试方法套件是一个独立项目，旨在提供系统预装应用所有的元素的操作方法，这些元素操作方法可以用于自动化用例调用，组装成自动化测试用例。</p><h2 id="_2-工程设计" tabindex="-1">2. 工程设计 <a class="header-anchor" href="#_2-工程设计" aria-label="Permalink to &quot;2. 工程设计&quot;">​</a></h2><h3 id="_2-1-工程结构" tabindex="-1">2.1. 工程结构 <a class="header-anchor" href="#_2-1-工程结构" aria-label="Permalink to &quot;2.1. 工程结构&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uos-method-toolkit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LICENSE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> README.md</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tests</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> umtk</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dde_file_manager</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dde_file_manager_method.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __init__.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deepin_music</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deepin_music_method.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __init__.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deepin_movie</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deepin_music_method.py</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __init__.py</span></span></code></pre></div><h3 id="_2-2-方案说明" tabindex="-1">2.2. 方案说明 <a class="header-anchor" href="#_2-2-方案说明" aria-label="Permalink to &quot;2.2. 方案说明&quot;">​</a></h3><ul><li><p>系统中各应用划分自己的模块，模块名称为应用包名，下划线连接单词。</p></li><li><p>每个应用存在一个唯一的出口文件，供外部用例调用。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> umtk.dde_file_manager </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DdeFileManagerMethod</span></span></code></pre></div><p><code>DdeFileManagerMethod</code> 可以调用 <code>dde-file-manager</code> 所有的元素操作方法。</p></li><li><p>所有方法以类的形式编写，遵循 PO 设计模式。</p></li><li><p>测试方法套件中所有的方法均为原子操作，不做复杂步骤的封装。</p></li></ul><h2 id="_3-套件发布" tabindex="-1">3. 套件发布 <a class="header-anchor" href="#_3-套件发布" aria-label="Permalink to &quot;3. 套件发布&quot;">​</a></h2><ul><li><p>套件分大版本发布，比如 V20、V25 是不同的测试方法套件版本，在不同的代码仓库中。</p></li><li><p>在同一个大版本中，套件持续保持更新，并在系统关键节点发布对应的版本；</p><p>比如 V20 阶段，1070 发布一个套件版本，1071 发布一个套件版本，以此类推，过程中如果根据需要出小版本。</p></li><li><p>套件通过 PyPI 发布，用户可直接通过 pip 命令安装使用：</p><p>安装：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> umtk</span></span></code></pre></div><p>使用：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> umtk.dde_file_manager </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DdeFileManagerMethod</span></span></code></pre></div></li></ul><h2 id="_4-套件维护" tabindex="-1">4. 套件维护 <a class="header-anchor" href="#_4-套件维护" aria-label="Permalink to &quot;4. 套件维护&quot;">​</a></h2><ul><li><p>套件由专人主责维护（maintainer），其他人可以提需求、issue、PR，以保持套件的各方面一致性。</p></li><li><p>鼓励内外部开发者贡献 PR。</p></li></ul><h2 id="_5-对套件的测试" tabindex="-1">5. 对套件的测试 <a class="header-anchor" href="#_5-对套件的测试" aria-label="Permalink to &quot;5. 对套件的测试&quot;">​</a></h2><p>套件里面保存元素的操作方法，在操作方法多了之后，维护方法的稳定性有效性将成为一个问题。</p><p>因此，我们需要建立对套件的自动化测试，专门针对元素操作方法函数进行测试，类似于单元测试。</p><p>适配厂商可以直接使用这些单元测试进行适配测试。</p><h2 id="_6-umtk-和-youqu2-的公共方法库-public-有何区别" tabindex="-1">6. UMTK 和 YouQu2 的公共方法库（public）有何区别 <a class="header-anchor" href="#_6-umtk-和-youqu2-的公共方法库-public-有何区别" aria-label="Permalink to &quot;6. UMTK 和 YouQu2 的公共方法库（public）有何区别&quot;">​</a></h2><blockquote><p>孔子《论语·卫灵公》: “道，不同，不相为谋。”</p></blockquote><p>亦各从其志也。</p><p><strong>使用的框架不同</strong></p><ul><li>YouQu2 的公共方法库（public）是在 YouQu2 的框架下进行开发的，它不能脱离 YouQu2 框架而独立使用。</li><li>UMTK 是基于 YouQu3 开发，YouQu3 采用全新的架构设计，和 YouQu2 有很大差异，因此 UMTK 和 public 二者属于两个时代，不兼容。</li></ul><p><strong>内容、范围、业务不同</strong></p><ul><li>UMTK 涵盖了 UOS 系统所有预装应用的原子操作方法，不存在复杂步骤的堆叠封装，不受需求变更影响，不涉及用例逻辑，可以对外开源发布。</li><li>public 仅包含自动化用例用到的少部分公共方法，范围覆盖很少，且存在较多涉及用例逻辑的复杂步骤方法，容易受到需求变更，不适合对外开源发布。</li></ul><p><strong>代码一致性</strong></p><ul><li>UMTK 所有代码由专人维护，且有完善的单元测试机制，确保操作方法的一致性、稳定性、有效性。</li><li>public 大量人员都可以对其进行直接修改，各种代码风格不统一，稳定性、有效性没有保障。</li></ul>`,26),t=[n];function p(h,k,d,o,r,c){return a(),i("div",null,t)}const g=s(e,[["render",p]]);export{F as __pageData,g as default};
